const bcrypt = require('bcryptjs');
const util = require('util');

const SALT_ROUNDS = 10;
const genSalt = util.promisify(bcrypt.genSalt);
const hash = util.promisify(bcrypt.hash);

module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define('users', {
    userId: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      allowNull: false,
      unique: true,
    },
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    userName: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: {
        args: true,
        msg: 'Username is unique and already in use!',
      },
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: {
        args: true,
        msg: 'Email is unique and already in use!',
      },
      validate: {
        isEmail: {
          msg: 'Email address must be valid',
        },
      },
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    roles: {
      type: DataTypes.ARRAY(DataTypes.ENUM({
        values: ['user', 'admin']
      })),
      allowNull: false,
    },
    profileImage: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    thumbnails: {
      type: DataTypes.JSONB,
      allowNull: true,
    },
    metadata: {
      type: DataTypes.JSONB,
    },
  }, {
    freezeTableName: true,
  });

  User.beforeCreate(async (doc, options) => {
    if (doc.email) {
      doc.email = doc.email.toLowerCase();
    }
    if (doc && doc.password) {
      const salt = await genSalt(SALT_ROUNDS);
      const hashedPassword = await hash(doc.password, salt);
      doc.password = hashedPassword;
    }
    return doc;
  });

  User.beforeBulkUpdate(async (doc, options) => {
    if (doc && doc.attributes && doc.attributes.email) {
      doc.attributes.email = doc.attributes.email.toLowerCase();
    }
    if (doc && doc.attributes && doc.attributes.password) {
      const salt = await genSalt(SALT_ROUNDS);
      const hashedPassword = await hash(doc.attributes.password, salt);
      doc.attributes.password = hashedPassword;
    }
    return doc;
  });


  return User;
};
