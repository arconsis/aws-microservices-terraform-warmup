const postsRepo = {
  async listUserPosts({
    userPK,
    attributes = [],
    limit = 50,
    offset = 0,
    orderBy = [
      ['createdAt', 'DESC'],
    ],
  }) {
    try {
      if (!userPK) {
        throw new Error('Add user PK to list user post.');
      }
      const {
        posts: postModel,
      } = this.getDbModels();
      const list = await postModel.findAndCountAll({
        where: {
          userId: userPK,
        },
        order: orderBy,
        attributes: attributes && Array.isArray(attributes) && attributes.length > 0
          ? attributes
          : { exclude: [] },
        limit,
        offset,
      });
      return {
        data: list && list.rows
          ? list.rows.map(el => el.get({ plain: true }))
          : [],
        pagination: {
          limit,
          offset,
          total: list && list.count
            ? list.count
            : 0,
        },
      };
    } catch (error) {
      throw error;
    }
  },
  async getPost({
    id,
    postId,
    attributes = [],
    lock,
    transaction,
  }) {
    try {
      const {
        posts: postModel,
      } = this.getDbModels();
      if (!id && !postId) {
        throw new Error('Add id or postId to get post.');
      }
      const res = await postModel.findOne({
        where: {
          ...(id && { id }),
          ...(postId && { postId }),
        },
        attributes: attributes && Array.isArray(attributes) && attributes.length > 0
          ? attributes
          : { exclude: [] },
        ...(lock != null && { lock }),
        ...(transaction != null && { transaction }),
      });
      if (!res) {
        throw new Error('Post doc not found');
      }
      return res.get({ plain: true });
    } catch (error) {
      throw error;
    }
  },
  async createPost({
    title,
    message,
    userId,
  }) {
    try {
      const {
        posts: postModel,
      } = this.getDbModels();
      const res = await postModel.create({
        title,
        message,
        userId,
      });
      return res.get({ plain: true });
    } catch (error) {
      throw error;
    }
  },
};

module.exports = function init({
  posts,
  sequelize,
}) {
  return Object.assign(Object.create(postsRepo), {
    getDbModels() {
      return {
        posts,
      };
    },
    getDB() {
      return sequelize;
    },
  });
};
