const getWhereToFetchAdmin = ({
  id,
  adminId,
  email,
}) => ({
  ...(id && { id }),
  ...(adminId && { adminId }),
  ...(email && { email }),
});

const adminRepo = {
  async getAdmin({
    id,
    adminId,
    email,
    attributes = [],
    lock,
    transaction,
  }) {
    try {
      const {
        admins: adminModel,
      } = this.getDbModels();
      if (!id && !email) {
        throw new Error('Add id or email to get admin.');
      }
      const res = await adminModel.findOne({
        where: getWhereToFetchAdmin({
          id,
          adminId,
          email,
        }),
        attributes: attributes && Array.isArray(attributes) && attributes.length > 0
          ? attributes
          : { exclude: [] },
        ...(lock != null && { lock }),
        ...(transaction != null && { transaction }),
      });
      if (!res) {
        const msg = email
          ? `Admin doc with email: ${email} not found.`
          : `Admin doc with id: ${id} not found.`;
        throw new Error(msg);
      }
      return res.get({ plain: true });
    } catch (error) {
      throw error;
    }
  },
  async createAdmin({
    firstName,
    lastName,
    email,
    password,
  }) {
    try {
      const {
        admins: adminModel,
      } = this.getDbModels();
      const res = await adminModel.create({
        firstName,
        lastName,
        email,
        password,
      });
      return res.get({ plain: true });
    } catch (error) {
      throw error;
    }
  },
};

module.exports = function init({
  admins,
  sequelize,
}) {
  return Object.assign(Object.create(adminRepo), {
    getDbModels() {
      return {
        admins,
      };
    },
    getDB() {
      return sequelize;
    },
  });
};
