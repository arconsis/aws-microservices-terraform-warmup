const bcrypt = require('bcryptjs');
const util = require('util');

const SALT_ROUNDS = 10;
const genSalt = util.promisify(bcrypt.genSalt);
const hash = util.promisify(bcrypt.hash);

module.exports = (sequelize, DataTypes) => {
  const Admin = sequelize.define('admins', {
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: {
        args: true,
        msg: 'Admin email is unique and already in use!',
      },
      validate: {
        isEmail: {
          msg: 'Email address must be valid',
        },
      },
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  }, {
    freezeTableName: true,
  });

  Admin.beforeCreate(async (doc, options) => {
    if (doc.email) {
      doc.email = doc.email.toLowerCase();
    }
    if (doc && doc.password) {
      const salt = await genSalt(SALT_ROUNDS);
      const hashedPassword = await hash(doc.password, salt);
      doc.password = hashedPassword;
    }
    return doc;
  });

  Admin.beforeBulkUpdate(async (doc, options) => {
    if (doc && doc.attributes && doc.attributes.email) {
      doc.attributes.email = doc.attributes.email.toLowerCase();
    }
    if (doc && doc.attributes && doc.attributes.password) {
      const salt = await genSalt(SALT_ROUNDS);
      const hashedPassword = await hash(doc.attributes.password, salt);
      doc.attributes.password = hashedPassword;
    }
    return doc;
  });


  return Admin;
};
  